/*
 * This file is part of ChunksLab-Gestures, licensed under the Apache License 2.0.
 *
 * Copyright (c) Amownyy <amowny08@gmail.com>
 * Copyright (c) contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id('java')
    id('maven-publish')
    id('io.github.goooler.shadow') version '8.1.7'
}

ext {
    baseVersion = '1.0.0'
    channel = 'DEVELOPMENT'

    asm_version = asm_version.toString()
    asm_commons_version = asm_commons_version.toString()
    jar_relocator_version = jar_relocator_version.toString()
    commons_pool_version = commons_pool_version.toString()
    invui_version = invui_version.toString();
    bstats_version = bstats_version.toString();
    adventure_bundle_version = adventure_bundle_version.toString();
    adventure_platform_version = adventure_platform_version.toString();
    gson_version = gson_version.toString();
    sqlite_driver_version = sqlite_driver_version.toString();
    h2_driver_version = h2_driver_version.toString();
    mongodb_driver_version = mongodb_driver_version.toString();
    hikari_version = hikari_version.toString();
    mariadb_driver_version = mariadb_driver_version.toString();
    mysql_driver_version = mysql_driver_version.toString();
    jedis_version = jedis_version.toString();
}

group = 'com.chunkslab.gestures'
version = getVersion()

allprojects {
    apply plugin: 'java'
    apply plugin: 'io.github.goooler.shadow'

    group = rootProject.group
    version = rootProject.version

    repositories {
        mavenCentral()
        maven { url = 'https://repo.papermc.io/repository/maven-public/' }
        maven { url = 'https://oss.sonatype.org/content/groups/public/' }
    }

    dependencies {
        compileOnly 'org.projectlombok:lombok:1.18.34'
        annotationProcessor 'org.projectlombok:lombok:1.18.34'
    }

    build {
        dependsOn shadowJar
    }
}

subprojects {
    apply plugin: 'maven-publish'
}

repositories {
    mavenCentral()
    maven { url = 'https://jitpack.io' }
    maven { url = 'https://repo.rapture.pw/repository/maven-snapshots/' }
    maven { url = 'https://repo.triumphteam.dev/snapshots/' }
    maven { url = 'https://storehouse.okaeri.eu/repository/maven-public/' }
    maven { url = 'https://repo.xenondevs.xyz/releases' }
    maven { url = 'https://repo.extendedclip.com/content/repositories/placeholderapi/' }
    maven { url = 'https://repo.inventivetalent.org/repository/public/' }
}

dependencies {
    compileOnly 'io.papermc.paper:paper-api:1.20.1-R0.1-SNAPSHOT'

    implementation project(':api')
    implementation project(':folia')
    implementation project(':item')

    implementation project(':playeranimator')
    implementation project(':nms')

    implementation("dev.triumphteam:triumph-cmd-bukkit:${rootProject.properties['triumph_cmd_version']}") {
        exclude group: "com.google.code.gson"
    }
    implementation("eu.okaeri:okaeri-configs-yaml-bukkit:${rootProject.properties['okaeri_config_version']}")
    implementation("org.mineskin:java-client:${rootProject.properties['mineskin_version']}")

    compileOnly("net.kyori:adventure-api:${rootProject.properties['adventure_bundle_version']}")
    compileOnly("net.kyori:adventure-text-minimessage:${rootProject.properties['adventure_bundle_version']}")
    compileOnly("net.kyori:adventure-text-serializer-legacy:${rootProject.properties['adventure_bundle_version']}")
    compileOnly("net.kyori:adventure-platform-bukkit:${rootProject.properties['adventure_platform_version']}")

    compileOnly("xyz.xenondevs.invui:invui:${rootProject.properties['invui_version']}")
    compileOnly("org.bstats:bstats-bukkit:${rootProject.properties['bstats_version']}")
    compileOnly("me.clip:placeholderapi:${rootProject.properties['placeholder_api_version']}")

    compileOnly("com.google.code.gson:gson:${rootProject.properties['gson_version']}")
    compileOnly("org.xerial:sqlite-jdbc:${rootProject.properties['sqlite_driver_version']}")
    compileOnly("com.h2database:h2:${rootProject.properties['h2_driver_version']}")
    compileOnly("org.mongodb:mongodb-driver-sync:${rootProject.properties['mongodb_driver_version']}")
    compileOnly("com.zaxxer:HikariCP:$hikari_version")
    compileOnly("org.mariadb.jdbc:mariadb-java-client:${rootProject.properties['mariadb_driver_version']}")
    compileOnly("com.mysql:mysql-connector-j:${rootProject.properties['mysql_driver_version']}")
    compileOnly("redis.clients:jedis:${rootProject.properties['jedis_version']}")
}

def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [
            'version': version,
            'asm_version': project.ext.asm_version,
            'asm_commons_version': project.ext.asm_commons_version,
            'jar_relocator_version': project.ext.jar_relocator_version,
            'commons_pool_version': project.ext.commons_pool_version,
            'invui_version': project.ext.invui_version,
            'bstats_version': project.ext.bstats_version,
            'adventure_bundle_version': project.ext.adventure_bundle_version,
            'adventure_platform_version': project.ext.adventure_platform_version,
            'gson_version': project.ext.gson_version,
            'sqlite_driver_version': project.ext.sqlite_driver_version,
            'h2_driver_version': project.ext.h2_driver_version,
            'mongodb_driver_version': project.ext.mongodb_driver_version,
            'hikari_version': project.ext.hikari_version,
            'mariadb_driver_version': project.ext.mariadb_driver_version,
            'mysql_driver_version': project.ext.mysql_driver_version,
            'jedis_version': project.ext.jedis_version,
    ]
    inputs.properties props
    filteringCharset = 'UTF-8'
    filesMatching(['**/*.json', '**/*.yml', '**/*.properties']) {
        expand props
    }
}

tasks.register("cleanTarget") {
    doFirst {
        def targetDir = file("$rootDir/target")
        if (targetDir.exists()) {
            targetDir.deleteDir()
        }
    }
}

shadowJar {
    dependsOn(jar)
    dependsOn(cleanTarget)

    archiveFileName = "Gestures v${archiveVersion.get()}.jar"
    destinationDirectory.set(file("$rootDir/target"))

    relocate 'dev.triumphteam.cmd', 'com.chunkslab.gestures.libraries.triumphteam'
    relocate 'eu.okaeri', 'com.chunkslab.gestures.libraries.okaeri'
    relocate 'org.mineskin', 'com.chunkslab.gestures.libraries.mineskin'
    relocate 'org.bstats', 'com.chunkslab.gestures.libraries.bstats'
    relocate 'com.zaxxer', 'com.chunkslab.gestures.libraries.zaxxer'
    relocate 'org.mariadb', 'com.chunkslab.gestures.libraries.mariadb'
    relocate 'com.mysql', 'com.chunkslab.gestures.libraries.mysql'
    relocate 'redis.clients', 'com.chunkslab.gestures.libraries.jedis'

    from sourceSets.getByName("main").output
    configurations = [project.configurations.getByName("runtimeClasspath")]
}

shadowJar.shouldRunAfter build

tasks.shadowJar {
    doLast {
        file("${rootDir}/libs/${project.name}-${project.version}.jar").delete()
    }
}

tasks.named('build').configure {
    def allProjects = rootProject.subprojects.findAll {
        it.path.startsWith(':nms') || it.path.startsWith(':playeranimator') || it.path.startsWith(':item')
    }
    dependsOn allProjects.collect { it.path + ':build' }
}

project(":api") {
    publishing {
        publications {
            maven(MavenPublication) {
                groupId = project.group
                artifactId = project.name
                version = project.baseVersion
                artifact shadowJar
            }
        }
        repositories {
            maven {
                url = uri(getRepositoryURL())
                credentials {
                    username = System.getenv("VOXELARC_REPO_USERNAME")
                    password = System.getenv("VOXELARC_REPO_PASSWORD")
                }
            }
        }
    }
}

def getGitCommitHash() {
    try {
        def process = new ProcessBuilder('git', 'rev-parse', '--short', 'HEAD')
                .redirectErrorStream(true)
                .start()
        process.waitFor()
        return '-' + process.inputStream.text.trim()
    } catch (Exception e) {
        return '-unknown'
    }
}

def getVersion() {
    def finalVersion = baseVersion
    if (channel && !channel.isEmpty()) {
        finalVersion += "-${channel}"
    }
    def includeHash = System.getenv("INCLUDE_GIT_HASH")
    if ((includeHash == null || includeHash.toBoolean()) && channel != "DEVELOPMENT") {
        finalVersion += getGitCommitHash()
    }
    return finalVersion
}

def getRepositoryURL() {
    if (channel.contains("SNAPSHOT")) {
        return "https://repo.voxelarc.net/snapshots/"
    } else if (channel.contains("DEVELOPMENT")) {
        return "https://repo.voxelarc.net/development/"
    } else {
        return "https://repo.voxelarc.net/releases/"
    }
}